# -------------------
# Requirements
# -------------------
No Jersey
todo  Add a simple JSON service with no schema

# -------------------
# Assumptions
# -------------------
# Assumption that payload sizes are reasonable to be consumed in memory (no streaming).  Reason being is that, for now, dynamic services will be consumed after the initial payload

# -------------------
# API definitions:
# -------------------
# service-name:  will be used to construct final endpoint URI
# service-description:  friendly description
# support-contact:  an email address indicating the support contact
# script location:  a URI reference to the script.  scripts can be resolved using fs2, classpath, and ...
# script-includes:  additional scripts to be evaluated (using eval()) prior to invoking the specified operation

# -------------------
# Routes and WADL:
# -------------------
# Between implicitly made assumptions and additional service data specified below, we are able to:
#  * Map a RESTFul web request to a specific Javascript function call
#  * Pass payload or query parameters to the function call
#  * White-list valid HTTP methods and JavaScript functions
#  * Dynamically generate a WADL at Runtime (and via simple tooling)

[

    {
        "base-uri": "/rest/v1/math",
        "description": "performs advanced mathematical operations such as multiply and divide on integers a and b",
        "author": "rchristian@liaison.com",
        "script-location": "classpath://service-scripts/examples/math.js",
        "query-params": [
                    {
                        "a": "Integer",
                        "b": "Integer"
                    }
                ]

        "operations": [
                    {
                        "multiply": "GET",
                        "divide": "GET"
                    }
                ]
    },



    {

        "base-uri": "/rest/v3/crud",
        "description": "create, read, update, delete, and list persisted entities of type foo",
        "author": "dev@seattle.liaison.com",
        "script-location": "fs2://service-scripts/examples/really/long/path/crud/foo.js",
        "accept-content": "application/xml",
        "request-xsd": classpath://path/to/schema-in.xsd",
        "response-xsd": classpath://path/to/schema-out.xsd",

        "script-includes": [
            {
                "classpath://scripts/includes/localization.js",
                "classpath://scripts/includes/utils.js"
            }
        ],

        "operations": [
            {
                "foo": "PUT",
                "foo": "GET",
                "foo": "POST",
                "foo": "DELETE",
                "foo": "HEAD"
            }
        ]
    }
]

